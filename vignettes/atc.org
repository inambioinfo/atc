#+TITLE: Working with ATC codes
#+AUTHOR:    Johannes Rainer
#+EMAIL:     johannes.rainer@eurac.edu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: ^:{} toc:nil
#+PROPERTY: exports code
#+PROPERTY: session *R*

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+BEGIN_HTML
---
title: "Working with ATC codes"
graphics: yes
output:
  BiocStyle::html_document:
    toc_depth: 2
  BiocStyle::pdf_document:
    toc_depth: 2
vignette: >
  %\VignetteIndexEntry{Working with ATC codes}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
  %\VignetteDepends{atc}
  %\VignettePackage{atc}
  %\VignetteKeywords{AnnotationData,Homo_sapiens}
---

**Authors**: `r packageDescription("atc")$Author`<br />
**Modified**: 18 February, 2016<br />
**Compiled**: `r date()`

#+END_HTML

* How to export this to a =Rmd= vignette			   :noexport:

Use =ox-ravel= to export this file as an R markdown file (=C-c C-e m r=). That
way we don't need to edit the resulting =Rmd= file.

* How to export this to a =Rnw= vignette 			   :noexport:

*Note*: this is deprecated! Use the =Rmd= export instead!

Use =ox-ravel= from the =orgmode-accessories= package to export this file to a
=Rnw= file. After export edit the generated =Rnw= in the following way:

1) Delete all =\usepackage= commands.
2) Move the =<<style>>= code chunk before the =\begin{document}= and before
   =\author=.
3) Move all =%\Vignette...= lines at the start of the file (even before
   =\documentclass=).
4) Replace =\date= with =\date{Modified: 21 October, 2013. Compiled: \today}=
5) Eventually search for all problems with =texttt=, i.e. search for pattern
   ="==.

Note: use =:ravel= followed by the properties for the code chunk headers,
e.g. =:ravel results='hide'=. Other options for knitr style options are:
+ =results=: ='hide'= (hides all output, not warnings or messages), ='asis'=,
  ='markup'= (the default).
+ =warning=: =TRUE= or =FALSE= whether warnings should be displayed.
+ =message=: =TRUE= or =FALSE=, same as above.
+ =include=: =TRUE= or =FALSE=, whether the output should be included into the
  final document (code is still evaluated).

* Introduction

This package provides the Anatomical Therapeutical Chemical (ATC) Classification
data and functions that facilitate working with these. The ATC data is defined
by the WHO Collaborating Centre (WHOCC) for Drug Statistics Methodology (Oslo,
Norway), which holds also the copyright for the data and dos not allow
distribution for commercial purposes.

This packages provides two ATC databases, bound to the variables =atc= and
=atc_wido=.  The =AtcDb= object bound to the =atc= variable access a database
containing the /official/ ATC data from the WHOCC web page. The =AtcDb= object
bound to =atc_wido= provides access to a database that was compiled manually
from data files from the /Wissenschaftliches Institut der AOK/
(http://www.wido.de), and from the online resources http://atccodes.com and
Wikipedia. The two databases might differ partially in their content (e.g. the
=atc_wido= contains also homeopathic compounds).

The ATC Classification system is used for the classification of active
ingredients of drugs according to the organ or system on which they act and
their therapeutic, pharmacological and chemical properties. In this system,
drugs are classified into groups at 5 different levels:

- *First level*: indicates the anatomical main group and consists of one letter.

- *Second level*: indicates the therapeutic main group and consists of two
  digits.

- *Third level*: indicates the therapeutic/pharmacological subgroup and consists
  of one letter.

- *Fourth level*: indicates the chemical/therapeutic/pharmacological subgroup
  and consists of one letter.

- *Fifth level*: indicates the chemical substance and consists of two
  digits. For the 5th level entries also defined daily dosages (ddd) may be
  provided.

Note that national versions of the ATC classification exist with eventual
additional codes and ddds.

* Basic usage

The data structure of the database is very simple, and it is thus straight
forward to retrieve data from it.

The =columns= or the =listTables= methods can be used to get some information of
the available values (see Database layout section below for a more detailed
description of the individual columns).

#+BEGIN_SRC R
  library(atc)

  ## First of all print some basic information
  atc

  ## What tables are available?
  listTables(atc)

  ## All available columns.
  columns(atc)
#+END_SRC

The =keys= method can be used to retrieve the ATC codes in the database, with
the additional argument =level= we can restrict to ATC codes from a certain
level or levels.

#+BEGIN_SRC R
  ## All ATC codes
  head(keys(atc))

  ## Only ATC codes from level 1 and 3
  head(keys(atc, level=c(1, 3)))
#+END_SRC

The =atcData= method can be used to extract additional information from the
database.

#+BEGIN_SRC R
  ## Get the full data
  head(atcData(atc))

  ## To retrive the full data we could also use the as.data.frame method
  head(as.data.frame(atc))
#+END_SRC

The arguments =key=, =level= and =pattern= can be used to restrict the results
to certain entries. Below we extract all elements from the database that contain
in the name the word =sodium=. The pattern search is performed case insensitive
and also partial matches are returned.

#+BEGIN_SRC R
  Sod <- atcData(atc, pattern="sodium")

  nrow(Sod)

  ## From what level are the retrieved ATC codes?
  table(Sod$level)

  ## Extract the ATC data up to level 4 containing "sodium" in their name.
  atcData(atc, pattern="sodium", level=1:4)
#+END_SRC



* Extract ATC codes from the official WHOCC web page

The official WHOCC web page provides a simple search functionality to retrieve
data for a user specified ATC code. The =crunchWHOCC= function we use below
recursively retrieves ATC data from this web page starting from either a
user-specified ATC code, or if not provided, for all level 1 codes and above.

#+BEGIN_SRC R :ravel eval=FALSE
  ## Retrieve all data from the WHOCC web page.
  whoccAtc <- crunchWHOCC()
#+END_SRC

The function returns 3 =data.frames= that can be used to build a RSQLite
database such as provided by the =atc= package.

#+BEGIN_SRC R :ravel eval=FALSE
  library(RSQLite)

  ## Connect to the database.
  con <- dbConnect(dbDriver("SQLite"), dbname="atc.sqlite")
  ## Store the 3 tables.
  dbWriteTable(con, name="atc", whoccAtc$atc, row.names=FALSE)
  dbWriteTable(con, name="ddd", whoccAtc$ddd, row.names=FALSE)
  dbWriteTable(con, name="metadata", whoccAtc$metadata, row.names=FALSE)
  ## Create indices for faster access.
  dbGetQuery(con, "create index key_idx on atc (key);")
  dbGetQuery(con, "create index level_idx on atc (level);")
  dbGetQuery(con, "create index ddd_key_idx on ddd (key);")
  dbDisconnect(con)
#+END_SRC

A =AtcDb= object can then be created using.

#+BEGIN_SRC R :ravel eval=FALSE
  atcDb <- AtcDb("atc.sqlite")
  atcDb
#+END_SRC


* Parse the official web site					   :noexport:
:PROPERTIES:
:eval: never
:END:

http://www.whocc.no/atc_ddd_index/

#+BEGIN_SRC R
  library(RCurl)
  library(XML)

  basequer <- "http://www.whocc.no/atc_ddd_index/?code="

  Plain <- readLines(paste0(basequer, "A"))

  ##docHtml <- htmlTreeParse(paste0(basequer, "A"))

  doc <- htmlParse(paste0(basequer, "A"))
  Test <- getNodeSet(doc, "//div[@id='content']")
  ## That would be a lever 1 parse...
  ## Would have to extract all a
  As <- getNodeSet(doc, "//div[@id='content']//a")

  enc <- "utf-8"
  doc2 <- htmlParse(paste0(basequer, "A01AA"), encoding=enc)
  Test <- getNodeSet(doc2, "//div[@id='content']")
  ## Here I could start extracting level 5...
  Table <- getNodeSet(doc2, "//div[@id='content']//table")
  As <- getNodeSet(doc2, "//div[@id='content']//a")
  ## Should be pretty simple though... follow all links up to level 5.
  Table <- readHTMLTable(doc2, encoding=enc)


  ## So, what should the function do: first we have a toquery vector, loop always through that
  ## and perform a query on one of the ATCs, if that was done, remove the value from the
  ## toquery

  ## x should be an XMLNodeSet
  .extractFromA <- function(x){
      if(!is(x, "XMLNodeSet"))
          stop("Don't know what to do with x, should be an XMLNodeSet...")
      Values <- unlist(lapply(x, xmlValue))
      Attrs <- lapply(x, xmlAttrs)
      atcC <- unlist(lapply(Attrs, function(z){
          if(!any(names(z) == "href"))
              return(NA)
          z <- z["href"]
          ## Now split on &
          spl <- unlist(strsplit(z, split="&"))
          at <- gsub(spl[1], pattern="./?code=", replacement="", fixed=TRUE)
          return(at)
      }), use.names=FALSE)
      return(cbind(key=atcC, name=Values))
  }

  crunchWHOCC <- function(codes, baseurl="http://www.whocc.no/atc_ddd_index/?code=",
                          encoding="utf-8"){
      ## That's the vector we're using to define what to read...
      if(!missing(codes)){
          toquery <- codes
      }else{
          toquery <- c("A", "C")
      }
      ## That's the vector of stuff we don't want.
      excludeByName <- c("New search", "Show text", "List of")
      atcCodes <- character()
      atcNames <- character()
      while(length(toquery) > 0){
          currentAtc <- toquery[1]
          ## Kick out the present ATC code.
          toquery <- toquery[-1]
          doc <- htmlParse(paste0(baseurl, currentAtc), encoding=encoding)
          ## Extract the links from the content div.
          as <- getNodeSet(doc, "//div[@id='content']//a")
          if(length(as) == 0)
              stop("Something went wrong! Did not get the expected data.")
          res <- .extractFromA(as)
          torem <- unlist(lapply(excludeByName, function(y){
              return(grep(res[, 2], pattern=y))
          }))
          if(length(torem) > 0)
              res <- res[-torem, , drop=FALSE]
          atcCodes <- c(atcCodes, res[, 1])
          atcNames <- c(atcNames, res[, 2])
          ## Parse the html table:
          theTable <- readHTMLTable(doc)
          ## Next we want to add the entries.
      }
      return(cbind(key=atcCodes, name=atcNames))
  }

  Test <- crunchWHOCC(codes="A01AA")
#+END_SRC



* Database layout

The database consists of 3 tables, =atc=, =ddd= and =metadata=. The columns for
the individual tables are listed below.

+ *atc*: the /main/ table providing the mapping between the ATC codes (also
  called keys) and their names.
  - =key=: column containing the ATC codes.
  - =name=: column with the name associated with the key.
  - =level=: the level of the ATC code (from 1 to 5).

+ *ddd*: the table providing the /defined daily dosage/ (ddd) for the ATC
  entries of level 5. Thus, this table contains only values for codes of level
  5, but not for all of them. Note also, that this table can contain multiple
  dosages for the same ATC code.
  - =key=: the ATC code.
  - =ddd=: the defined daily dose.
  - =unit=: the unit of the dose.
  - =administration_route=: the route of administration of the drug.
  - =note=: optional additional information.

+ *metadata*: table providing additional information (creation time, source
  etc). Values are stored as key-value pairs.
  - =name=: the name of the key.
  - =value=: its value.

* TODOs								   :noexport:

** DONE Implement a parser for the WHO web page.
   CLOSED: [2016-02-17 Wed 08:42]
   - State "DONE"       from "TODO"       [2016-02-17 Wed 08:42]
** DONE Implement the =atcData= object/class.
   CLOSED: [2016-02-17 Wed 08:42]
   - State "DONE"       from "TODO"       [2016-02-17 Wed 08:42]
** TODO Implement all required methods [/]
** DONE Adapt the database to the /new/ style.
   CLOSED: [2016-02-17 Wed 08:41]
   - State "DONE"       from "TODO"       [2016-02-17 Wed 08:41]
** TODO Update the =crunchWHOCC= function to fetch only codes with level >= currentlevel

Compare the results to the /old/ result.

